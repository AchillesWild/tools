<?xml version="1.0" encoding="UTF-8"?>  
<!DOCTYPE configuration PUBLIC "-//mybatis.org//DTD Config 3.0//EN" "http://mybatis.org/dtd/mybatis-3-config.dtd">  
<configuration>  
    <settings>
		<!-- 使全局的映射器启用或禁用缓存。 -->
	  <setting name="cacheEnabled" value="true"/>
		<!-- 全局启用或禁用延迟加载。当禁用时，所有关联对象都会即时加载。 -->
	  <setting name="lazyLoadingEnabled" value="true"/>
		<!-- 是否允许单条sql 返回多个数据集  (取决于驱动的兼容性) default:true -->
	  <setting name="multipleResultSetsEnabled" value="true"/>
		<!-- 是否可以使用列的别名 (取决于驱动的兼容性) default:true -->
	  <setting name="useColumnLabel" value="true"/>
		<!-- 允许JDBC 生成主键。需要驱动器支持。如果设为了true，这个设置将强制使用被生成的主键，有一些驱动器不兼容不过仍然可以执行。  default:false  -->
	  <setting name="useGeneratedKeys" value="false"/>
		<!-- 指定 MyBatis 如何自动映射 数据基表的列 NONE：不隐射　PARTIAL:部分  FULL:全部  -->
	  <setting name="autoMappingBehavior" value="PARTIAL"/>
		<!-- 这是默认的执行类型  （SIMPLE: 简单； REUSE: 执行器可能重复使用prepared statements语句；BATCH: 执行器可以重复执行语句和批量更新）  -->
	  <setting name="defaultExecutorType" value="SIMPLE"/>
	  <setting name="defaultStatementTimeout" value="25"/>
	  <setting name="safeRowBoundsEnabled" value="false"/>
		<!-- 使用驼峰命名法转换字段。 -->
	  <setting name="mapUnderscoreToCamelCase" value="false"/>
		<!-- 设置本地缓存范围 session:就会有数据的共享  statement:语句范围 (这样就不会有数据的共享 ) defalut:session -->
		<setting name="localCacheScope" value="SESSION"/>
		<!-- 设置但JDBC类型为空时,某些驱动程序 要指定值,default:OTHER，插入空值时不需要指定类型 -->
	  <setting name="jdbcTypeForNull" value="OTHER"/>
	  <setting name="lazyLoadTriggerMethods" value="equals,clone,hashCode,toString"/>

		<!--打印完整sql出参入参-->
	  <!--<setting name="logImpl" value="STDOUT_LOGGING"/>-->
    </settings>



	<!--<typeAliases>-->
<!-- 		<package name=""/> -->
<!-- 	  <typeAlias alias="QuartzSetting" type="com.entity.setting.QuartzSetting"/> -->
	<!--</typeAliases>-->

	<plugins>
		<plugin interceptor="com.github.pagehelper.PageInterceptor">
			<!--该参数默认为false 设置为true时，会将RowBounds第一个参数offset当成pageNum页码使用 和startPage中的pageNum效果一样-->
			<property name="offsetAsPageNum" value="true"/>
			<!--该参数默认为false 设置为true时，使用RowBounds分页会进行count查询-->
			<property name="rowBoundsWithCount" value="true"/>
			<!--设置为true时，如果pageSize=0或者RowBounds.limit = 0就会查询出全部的结果 （相当于没有执行分页查询，但是返回结果仍然是Page类型）-->
			<property name="pageSizeZero" value="true"/>
			<!-- 3.3.0版本可用 - 分页参数合理化，默认false禁用 启用合理化时，如果pageNum<1会查询第一页，如果pageNum>pages会查询最后一页 禁用合理化时，如果pageNum<1或pageNum>pages会返回空数据-->
			<property name="reasonable" value="false"/>
			<property name="params"   value="pageNum=pageHelperStart;size=pageHelperRows;"/>
			<property name="supportMethodsArguments" value="false"/>
			<property name="returnPageInfo" value="none"/>
		</plugin>
	</plugins>
	
<!-- 	<typeHandlers> -->
<!-- 		<package name=""/> -->
<!-- 	</typeHandlers> -->
      

</configuration>  

<!-- These are extremely important tweaks that modify the way that MyBatis behaves at runtime. The following table describes the settings, their meanings and their default values. -->

<!-- Setting	Description	Valid Values	Default -->
<!-- cacheEnabled	Globally enables or disables any caches configured in any mapper under this configuration.	true | false	true -->
<!-- lazyLoadingEnabled	Globally enables or disables lazy loading. When enabled, all relations will be lazily loaded. This value can be superseded for an specific relation by using the fetchType attribute on it.	true | false	false -->
<!-- aggressiveLazyLoading	When enabled, an object with lazy loaded properties will be loaded entirely upon a call to any of the lazy properties. Otherwise, each property is loaded on demand.	true | false	true -->
<!-- multipleResultSetsEnabled	Allows or disallows multiple ResultSets to be returned from a single statement (compatible driver required).	true | false	true -->
<!-- useColumnLabel	Uses the column label instead of the column name. Different drivers behave differently in this respect. Refer to the driver documentation, or test out both modes to determine how your driver behaves.	true | false	true -->
<!-- useGeneratedKeys	Allows JDBC support for generated keys. A compatible driver is required. This setting forces generated keys to be used if set to true, as some drivers deny compatibility but still work (e.g. Derby).	true | false	False -->
<!-- autoMappingBehavior	Specifies if and how MyBatis should automatically map columns to fields/properties. NONE disables auto-mapping. PARTIAL will only auto-map results with no nested result mappings defined inside. FULL will auto-map result mappings of any complexity (containing nested or otherwise).	NONE, PARTIAL, FULL	PARTIAL -->
<!-- defaultExecutorType	Configures the default executor. SIMPLE executor does nothing special. REUSE executor reuses prepared statements. BATCH executor reuses statements and batches updates.	SIMPLE REUSE BATCH	SIMPLE -->
<!-- defaultStatementTimeout	Sets the number of seconds the driver will wait for a response from the database.	Any positive integer	Not Set (null) -->
<!-- safeRowBoundsEnabled	Allows using RowBounds on nested statements.	true | false	False -->
<!-- mapUnderscoreToCamelCase	Enables automatic mapping from classic database column names A_COLUMN to camel case classic Java property names aColumn.	true | false	False -->
<!-- localCacheScope	MyBatis uses local cache to prevent circular references and speed up repeated nested queries. By default (SESSION) all queries executed during a session are cached. If localCacheScope=STATEMENT local session will be used just for statement execution, no data will be shared between two different calls to the same SqlSession.	SESSION | STATEMENT	SESSION -->
<!-- jdbcTypeForNull	Specifies the JDBC type for null values when no specific JDBC type was provided for the parameter. Some drivers require specifying the column JDBC type but others work with generic values like NULL, VARCHAR or OTHER.	JdbcType enumeration. Most common are: NULL, VARCHAR and OTHER	OTHER -->
<!-- lazyLoadTriggerMethods	Specifies which Object's methods trigger a lazy load	A method name list separated by commas	equals,clone,hashCode,toString -->
<!-- defaultScriptingLanguage	Specifies the language used by default for dynamic SQL generation.	A type alias or fully qualified class name.	org.apache.ibatis.scripting.xmltags.XMLDynamicLanguageDriver -->
<!-- callSettersOnNulls	Specifies if setters or map's put method will be called when a retrieved value is null. It is useful when you rely on Map.keySet() or null value initialization. Note primitives such as (int,boolean,etc.) will not be set to null.	true | false	false -->
<!-- logPrefix	Specifies the prefix string that MyBatis will add to the logger names.	Any String	Not set -->
<!-- logImpl	Specifies which logging implementation MyBatis should use. If this setting is not present logging implementation will be autodiscovered.	SLF4J | LOG4J | LOG4J2 | JDK_LOGGING | COMMONS_LOGGING | STDOUT_LOGGING | NO_LOGGING	Not set -->
<!-- proxyFactory	Specifies the proxy tool that MyBatis will use for creating lazy loading capable objects.	CGLIB | JAVASSIST	CGLIB -->


<!-- A type alias is simply a shorter name for a Java type. It's only relevant to the XML configuration and simply exists to reduce redundant typing of fully qualified classnames. For example: -->
<!-- With this configuration, Blog can now be used anywhere that domain.blog.Blog could be. -->
<!-- You can also specify a package where MyBatis will search for beans. For example: -->
<!-- <typeAliases> -->
<!--   <package name="domain.blog"/> -->
<!-- </typeAliases> -->
<!-- Each bean found in domain.blog , if no annotation is found, will be registered as an alias using uncapitalized non-qualified class name of the bean. Thas is domain.blog.Author will be registered as author. If the @Alias annotation is found its value will be used as an alias. See the example below: -->
<!-- @Alias("author") -->
<!-- public class Author { -->
<!--     ... -->
<!-- } -->
<!-- There are many built-in type aliases for common Java types. They are all case insensitive, note the special handling of primitives due to the overloaded names. -->
<!-- Alias	Mapped Type -->
<!-- _byte	byte -->
<!-- _long	long -->
<!-- _short	short -->
<!-- _int	int -->
<!-- _integer	int -->
<!-- _double	double -->
<!-- _float	float -->
<!-- _boolean	boolean -->
<!-- string	String -->
<!-- byte	Byte -->
<!-- long	Long -->
<!-- short	Short -->
<!-- int	Integer -->
<!-- integer	Integer -->
<!-- double	Double -->
<!-- float	Float -->
<!-- boolean	Boolean -->
<!-- date	Date -->
<!-- decimal	BigDecimal -->
<!-- bigdecimal	BigDecimal -->
<!-- object	Object -->
<!-- map	Map -->
<!-- hashmap	HashMap -->
<!-- list	List -->
<!-- arraylist	ArrayList -->
<!-- collection	Collection -->
<!-- iterator	Iterator -->

