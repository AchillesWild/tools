<?xml version="1.0" encoding="UTF-8"?>
<beans default-lazy-init="true"
	xmlns="http://www.springframework.org/schema/beans" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd">


	<bean id="jedisPoolConfig" class="redis.clients.jedis.JedisPoolConfig">
		<!-- 资源池确保最少空闲的连接数 -->
		<property name="minIdle" value="5" />
		<!--资源池确保最少空闲的连接数 -->
		<property name="maxIdle" value="10" />
		<!--资源池确保最少空闲的连接数 -->
		<property name="maxTotal" value="50" />
<!-- 		当资源池用尽后，调用者是否要等待。只有当为true时，下面的maxWaitMillis才会生效 -->
		<property name="blockWhenExhausted" value="true" />
		<!--当资源池连接用尽后，调用者的最大等待时间(单位为毫秒) -->
		<property name="maxWaitMillis" value="3000" />
		<!--向资源池归还连接时是否做连接有效性检测(ping)，无效连接会被移除,业务量很大时候建议设置为false(多一次ping的开销)。 -->
		<property name="testOnBorrow" value="true" />
		<!-- 向资源池归还连接时是否做连接有效性检测(ping)，无效连接会被移除,业务量很大时候建议设置为false(多一次ping的开销)。 -->
		<property name="testOnReturn" value="true" />
		<!--是否开启jmx监控，可用于监控 -->
		<property name="jmxEnabled" value="true" />
	</bean>


	<bean id="shardedJedisPool" class="redis.clients.jedis.ShardedJedisPool" scope="singleton">
		<constructor-arg index="0" ref="jedisPoolConfig" />
		<constructor-arg index="1">
			<list>
				<bean class="redis.clients.jedis.JedisShardInfo">
					<constructor-arg name="host" value="localhost" />
					<constructor-arg name="port" value="6379" />
					<constructor-arg name="timeout" value="2000" />
<!-- 					<constructor-arg name="password" value="${redis.share1.password}" />   -->
				</bean>
			</list>
		</constructor-arg>
	</bean>
	
	
	
	
    <!--redis链接密码-->
<!--     <bean id="redisPassword" class="org.springframework.data.redis.connection.RedisPassword"> -->
<!--         <constructor-arg name="thePassword" value="${redis.auth}"></constructor-arg> -->
<!--     </bean> -->

    <!--spring-data-redis2.0以上的配置-->
    <bean id="redisStandaloneConfiguration" class="org.springframework.data.redis.connection.RedisStandaloneConfiguration">
        <property name="hostName" value="localhost"/>
        <property name="port" value="6379"/>
<!--         <property name="password" ref="redisPassword" /> -->
<!--         <property name="database" value="${redis.dbIndex}"/> -->
    </bean>
    <!--配置jedis链接工厂 spring-data-redis2.0中
        建议改为构造器传入一个RedisStandaloneConfiguration  单机
                  RedisSentinelConfiguration    主从复制
                  RedisClusterConfiguration     集群-->
    <bean id="jedisConnectionFactory" class="org.springframework.data.redis.connection.jedis.JedisConnectionFactory">
        <constructor-arg name="standaloneConfig" ref="redisStandaloneConfiguration"></constructor-arg>
    </bean>

    <!--手动设置 key  与 value的序列化方式-->
    <bean id="keySerializer" class="org.springframework.data.redis.serializer.StringRedisSerializer"/>
    <bean id="valueSerializer" class="org.springframework.data.redis.serializer.GenericJackson2JsonRedisSerializer"/>

    <!--配置jedis模板  -->
    <bean id = "redisTemplate" class="org.springframework.data.redis.core.RedisTemplate">
        <property name="connectionFactory" ref="jedisConnectionFactory" />
        <property name="keySerializer" ref="keySerializer" />
        <property name="valueSerializer" ref="valueSerializer" />
        <property name="hashKeySerializer" ref="keySerializer" />
        <property name="hashValueSerializer" ref="valueSerializer" />
    </bean>

    <!--也可以StringRedisTemplate  专注于String的操作  -->
    <bean id="stringRedisTemplate" class="org.springframework.data.redis.core.StringRedisTemplate">
        <!--在StringRedisTemplate与redisTemplate不同,可以直接造构造器中传入ConnectionFactory-->
        <constructor-arg name="connectionFactory" ref="jedisConnectionFactory"></constructor-arg>
        <property name="keySerializer" ref="keySerializer" />
        <property name="valueSerializer" ref="valueSerializer" />
        <property name="hashKeySerializer" ref="keySerializer" />
        <property name="hashValueSerializer" ref="valueSerializer" />
    </bean>	

</beans>